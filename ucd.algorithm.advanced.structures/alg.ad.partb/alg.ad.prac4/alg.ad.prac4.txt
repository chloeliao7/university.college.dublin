+ Answer questions A3,4-6,7; B1,3, and questions C4
---------------------------------------------------

3A. Show how the state of both an array-based and a link-based Queue changes 
after each of the following operations: enqueue('Ireland'), 
dequeue(), enqueue('England'), dequeue(), enqueue('Wales'), dequeue(), 
enqueue('Scotland'), dequeue(), enqueue('France'), enqueue('Germany') 


--- Array Based (o(1)) 
// need to know the size before hand // fixed size !!! => {1, 2, _, _, _, _} of 4 null (garbage unused)

| state of stack (input) | command             | num of elements | output                 |
| ---------------------- | ------------------- | --------------- | ---------------------- |
| [null] {size_of_array} | enqueue('Ireland'), | 1               | ['Ireland']            |
| ---------------------  | ------------------  | --------------  | ---------------------- |
| ['Ireland']            | dequeue()           | 0               | [null]                 |
| ---------------------  | ------------------  | --------------  | ---------------------- |
| [null]                 | enqueue('England')  | 1               | ['England']            |
| ---------------------  | ------------------  | --------------  | ---------------------- |
| ['England']            | dequeue()           | 0               | [null]                 |
| ---------------------  | ------------------  | --------------  | ---------------------- |
| [null]                 | enqueue('Wales')    | 1               | ['Wales']              |
| ---------------------  | ------------------  | --------------  | ---------------------- |
| ['Wales']              | dequeue()           | 0               | [null]                 |
| ---------------------  | ------------------  | --------------  | ---------------------- |
| [null]                 | enqueue('Scotland') | 1               | ['Scotland']           |
| ---------------------  | ------------------  | --------------  | ---------------------- |
| ['Scotland']           | dequeue()           | 0               | [null]                 |
| ---------------------  | ------------------  | --------------  | ---------------------- |
| [null]                 | enqueue('France')   | 1               | ['France']             |
| ---------------------  | ------------------  | --------------  | ---------------------- |
| ['France']             | enqueue('Germany')  | 2               | ['France', 'Germany']  |
| ---------------------  | ------------------  | --------------  | ---------------------- |
          

--- Linked List Based (o(n))
// NO UNUSED MEMORY => extra memory for pointer

| state of stack (input) | command             | num of elements | output                 |
| ---------------------- | ------------------- | --------------- | ---------------------- |
|                        | enqueue('Ireland'), |                 |                        |
| ---------------------  | ------------------  | --------------  | ---------------------- |
|                        | dequeue()           |                 |                        |
| ---------------------  | ------------------  | --------------  | ---------------------- |
|                        | enqueue('England')  |                 |                        |
| ---------------------  | ------------------  | --------------  | ---------------------- |
|                        | dequeue()           |                 |                        |
| ---------------------  | ------------------  | --------------  | ---------------------- |
|                        | enqueue('Wales')    |                 |                        |
| ---------------------  | ------------------  | --------------  | ---------------------- |
|                        | dequeue()           |                 |                        |
| ---------------------  | ------------------  | --------------  | ---------------------- |
|                        | enqueue('Scotland') |                 |                        |
| ---------------------  | ------------------  | --------------  | ---------------------- |
|                        | dequeue()           |                 |                        |
| ---------------------  | ------------------  | --------------  | ---------------------- |
|                        | enqueue('France')   |                 |                        |
| ---------------------  | ------------------  | --------------  | ---------------------- |
|                        | enqueue('Germany')  |                 |                        |
| ---------------------  | ------------------  | --------------  | ---------------------- |
          


4A. Write out the pseudo code for the insertLast(o) operation of the Deque ADT. The 
insertFirst(o) pseudo code is given below as an example of a similar 
operation




NOTE: once you have written a first version of your pseudo code, test it using 
two dry runs: 

	(1) inserting into an empty Deque,
	
	(2) inserting into a non-empty Deque. 
	
	

5A. Write out the pseudo code for the removeLast() and removeFirst() operations 
of the Deque ADT. As with question 4, for each removal operation consider 2 
cases: 

	(1) a Deque containing 1 item 

	(2) a Deque containing more than 1 item. 


6A. Write out the pseudo code for the isEmpty(), size(), front() and rear() 
operations of the Deque ADT. 

7A. Show how the state of a link-based Deque changes after each of the following 
operations: insertFirst('Ireland'), removeLast(), insertLast('England'), 
removeFirst(), insertLast('Wales'), insertFirst('Scotland'), insertLast('France'), 
removeFirst(), removeLast(), insertLast('Germany') After the last operation, 
list the countries that were removed from the Deque and the countries held in the Deque 

---------------------------------------------------------------------

1B. ArrayQueue: Create a new Java class called ArrayQueue that realizes the 
array-based Queue implementation strategy. As with the Stack implementations 
(Assignment 4), remember to implement a toString() method to help you debug / 
visualize the operation of the class. 


3B. LinkedDeque: Create a new Java class called LinkedDeque that realizes the 
link-based Deque implementation strategy.Your implementation should be based on 
the pseudo code you completed in questions A4-6. Again, remember to implement a 
toString() method to help you debug / visualize the operation of the class. 

---------------------------------------------------------------------

4C. Write two main methods that correspond to the series of insertion and removal 
operations outlined in question A7. 
