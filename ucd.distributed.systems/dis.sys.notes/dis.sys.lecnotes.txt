## introduction rem.collier@ucd.ie

what we will learn 

- distributed programing
- basic programing(dockets)

- basic networking - socket
- distributed objects - RMI
- web service - soap and rest 
- message orientated middleware - active mQ

structural course
paper review - one page : 20% 
group representation: 20% 
practical work: 20%
group project: 40% 

a lab will start week 2 

---------------------------------------------

>>> paper review 
had-hoop,
synapse,
Cassandra,
chubby,
zookeeper,
dynamo,
scribe,
ceph,
big-table,
Voldemort,
megastore,
spanner,
percolator,
Aubrey,
espresso,
draft,

enrollment key: 

ATM example
- customer id 
- width-draw
- amount

check if everything goes through 

typical false assumptions:
- The network is reliable
- The network is secure
- Everything is homogeneous
- The topology does not change
- Latency is zero
- Bandwidth is infinite
- Transport cost is zero
- There is one administrator

Strict Consistency, Sequential Consistency, Eventual Consistency
if you want to to do any of these you need: 
- TIMESTAMPS: vibration of different speed
  > Berkeley and CristiansAlgorithms  
    > 
- Universal Coordinated Time UTC

- Network Time Protocol (NTP

>> lecture two 
## networking **basics** 

IP address identity nodes 
>> 193.132.49

arp resolves IP address to media access control 
>> DNS resolves names to IP address

PORTS - http type port (80,90,more)
>> Standard - 80, 442, 
>> ssh - 22, 23, 
>> smtp - 25
>> dns - 53

- ip address to connect to a specific machine 
- use port to get information on a specific program 
telnet = a way to connect to another program 
>> telnet www..ie  
>> ... simple 

sockets mean making a connection to server and client
>> two way 

ARP resolves IP addresses to Media Access Control (MAC) addresses.

--------------------------------------------

 Process: a running instance of a computer program 

 Threads: can be executed in parallel. 
    - all threads share the same bit of memory 

-------------------------------------------------

>> lecture 3 
>> Both TCP and UDP are protocols used for sending bits of data — known as packets — over the Internet. <!--  -->

serialization 

RMI - takes objects serializes them, sends them to the net and 
    on the other side and converted it back to an object 
    
    objects contain - state 

sending binary 
        + DataOutputStream os = new DataOutSteam(socket.getOutputStream()); 
        + os.writeInt(3); 
        + os.writeFloat; 
        + os.writeByte 
        + os.writeByte('/n|)

receiving 
    dataInputStream is = new DataInputStream(socket.getInputStream()); 
    int n = us.readInt(); 
    Float f  = is.readFloat(); 
    String str = is.readLine(); 

>> can use xlm like  json 

# TCP vs UDP: 
# Transmission Control Protocol (TCP)
#
TCP is designed for reliable communication 
- lost or damaged data 
- if packets arrive our of order TCP puts them back together 
- can slow down the transmission 
- cant be offline: computer will not pick up from remote 

# UDP
- not reliable 
- they sit on top 
- the header adds 8 bytes and reorders things but is unreliable 

# UDP Datagrams
- doesn't go through any type of checking like TCP 
- if you use FTP, you won't use UDP
- not working with packets 
<!-- - based on lifecycles -->
- ! REMEMBER !!!! great for streaming 

# Multicast: up and TCP 
- point to point 
- some servers need one too many communication
- : radio and tv 

- multicast fills the gap 
- + it is roader than point to unicast comm but narrower broadcast 

- Clients express the interest in multicast data by joining a particular multicast groups 
- works kind of like a UDP server 

Multicast application = audio, video, multiplayer, distributed file system
- bonjour on a mac 

>> difference between multicast and UDP 
- one multicast to group all represented by a single multicast address 
- all addresses are IP address in the range of 224.0.0.0 to 239.255.255.255
- multicast group is a channel, and you share an IP address

TCP would be a bad choice 

>> dynamic health 
- IP addresses can be used to identify different nodes 

# DNS - Multicast based 
// Look it up 

# How TCP Works

# A third way (udp, TCP, DNS and multicast )
- socket based implementations can be slow 
- spends the time to read - blocking 

So... JAVA NIO _ New IO is an alternative IO API FOR JAVA 
- decouples data processing from connection handling 
- read and write occur in parallel with data processing 
- designed to scale 

based on Channels buffers and selectors 
- data is read from a buffer into a channel 
- data is written from a channel into a buffer 
- selector monitors channels and handles events 

NIO JAVA: NON-BLOCKING IO 
- one thread per connection is rubbish ( waiting and receiving )
- one thread with a selector - events are ready to be processed ( multiple )
- processes it and out of all channels are ready it chooses one 
- data comes in - process and data comes out 
- once pushed back to the channel process it and pushed back 

JAVA NIO Channels : like streams : Java: 
- FileChannel 
- // write more 

Java Buffers: 
- write or read mode
- bytes in the form of an array = up or down 

buffer mode: read or write - 
- the program determines what mode the buffer is in 

Five steps 
- create buffer
- write data to a buffer
- flip the buffer 
- read the data from the buffer
- clear /' compact the buffer 

hints: can rewind marking, and resting

NIO Selector : 
// do research on this 

LOOK UP NETTY!!!!

# Summarize: 
broadcast, the packet is forwarded to all the hosts connected to the network 
whereas, in multicast, the packet is forwarded only to intended recipients.

TCP: 20 Bytes header: file transfer, remote access 
- Transmission Control Protocol
- Three-way 
- + sync, sync back, acknowledgment received

UDP: 8 bytes header: connectionless, file streaming
- connection-less does not establish a session
- fire and forget 
- sends data a doest care
- will try to cram 
- faster than TCP

------------------------------------------

>> lecture 5 

 Introduction 
 - idea: distributed objects are an object-oriented approach to implementing remote procedure cell 

Distributed object framework 
- Cobra 
- DCOM
- Java RMI
- JINI

Cobra: standard for enabling interaction between applications written in heterogenous languages 

- BASED on the definition of public interfaces written the IDL (interface definition language); 
----- typedef, structs, interface and so on 

# COBRA: Process: Cobra is a general-purpose, object-oriented programming language
- Microsoft .NET

client process 
- client application code 
- -> proxy 
- -> orb (object request broker) 
- ->  request 

            < - request and reply - >

server process 
- orb (object request broker) 
- -> poa (portable object adapter) 
- -> servant ()

IIOP = GIOP + TCP/IP 

GIOP: GENERAL INTER OR B PROTOCOL - is an abstract protocol 
    - defines byte based data transfer syntax called common data representation 
    - supports 8 basic message types: 
    ---- request, reply, cancel request, local request and so on

IIOP: requires exceptions to be added to firewalls (unlike SOAP)

RMI: Remote method invocation(RMI)
idea - a mechanism to allow Java objects in different JVMs to communicate "Directly" with each other

- remote lives on a server and has a remote interface 
- local object interacts with the remote object by invoking method on a local stub that deals with invoking the method on the remote object
- the stub and the skeleton 

MOST java code is SERIALIZED!!! Important to be able to do 
idea - separate the implementation from the public interface
- export the implementation as a remote object 
- generates a skeleton to act as the remote object server 
- + skeleton registers object 
- uses a stub (proxy) and acts as a client 
- + java.lang.reflect.Proxy 

- global registry naming service is used to resolve objects identifiers to remote objects addresses (URL)

LOOK CLOSELY: RMI JAVA ARCHITECTURE 

SERVER: 
1. Create Object 
2. Expose Object - 
3. object to invocation Handle ---.....

4. rebinds Objects
RMI REGISTRY 
5. lookup object 

CLIENT:
1. Proxy - object 
2. invoke method and back to create object

------------------------------------

>> lecture 6

How do proxies work 

proxy class: imitate classes when there are no classes 
- you can cast the promise 

RMI works because the stub and skeleton can be 

JINI: DECENTRALIZED OO Distributed System in JAVA 
- uses custom remote method invocation protocol 
- HTTP server  supports the on-demand distribution of compiled code (class server )
- packaged with services for locking distributed events leasing transactions etc. 
- includes a tuple space implementation called JAVA-SPACE

Style: 
Processor - operating system - java 2 platform - JINI - JINI services 

JINI FLOW : 
1. discover - network service discoveries available service 
2. join - network service send service proxy to LUS
3. discover - Network client discovered available to LUS
4. look up - network client sends a request to plus 
5. receive - plus receives service proxy to network client 
6. use - network uses it 

Lookup service : unique identifiers, associate set of attributable, .....? 

building the service : 
- you write a class that implements the service, net JINI lookup serviceIDListener
- implements a constructor 

------------------------------------

What is a service : 
>> a service us a reusable component that can be used as a building block to form larger more complex business application functionality. 
>> object a can talk to b --- without the user's intervention can now talk to C 

stateless means that it's a new request in the system. 

Service composition: the key feature of SOA is the ability to build composite services from existing services 
ex: bus-catcher: how much it will cost and where they are: fare, time, bus, and map 

HEARTY.... lower and lower services: 
SERVICE ORCHESTRATION - one service to rule them all 
SERVICE CHOREOGRAPHY - no central controller but services need to know when to interact with other services 

What is Web Services: 
service 
- communicates protocols: XML - describes its message using XML schema 
- SOAP - simple object access protocol 
- provide endpoint description language 
- can be discovered using UDDI - universal description discovery and integration specification - user-friendly

steps web service 
- look for a service searching in UDDI directory
....

Three things about soap 

A Soap message is an XML document containing the following statements

------------------------------------

learn JUDDY
>> lecture 8 

JAX WS IS A FULLY
- we will reuse quotation examples from before 
- similar to RMI to define a web service 
- annotation needed: @Web-service , @ web method

annotate the class using Web-service and 
- @soapBinding(style = style.RPC, use=Use.LITERAL)

publish endpoint 
- Endpoint.publish('http/localhost/stock-service', new Stock-Impl)
<!-- http/localhost/stock-service/GetStockQuote?WSDL -->

URL wsd-lURL = new URL('http... local host'); 
qNam qname = new qname('http quote', 'stock implementation-service')

///// name in () needs to match the interface name ; 

REST crud = database: Create, read, update and delete put: create and update 

get -> 
URL: https://stock.org/stock/<stock-code> 

REST Response CODE
200 = get/post ok entity works in the body 
201 - post. put a crafted link in the location header 
204 - delete: no content 
401 - not authorized 
403 - forbidden 
404 - resource not found 

Finally: HATEOAS : 

on top of rest >> defines template structure fro JSON L VARIANTS XML 

http://<host>:/<PORT>/<restpath>/res-id(s)!!!

Browser, application - four services: 

---------------------------------------------->>>> 

>> Lecture 9 = REST

RULE: When sending JSON it must be part of the body of the HTTP request; HTTP:/HHHHH?>/JSON-VALUE/HHHHH/CALCULATION{ID}

- STATE PROBLEMS WITH JSON = cant update URL !!!! 
- SOLUTION : DATA IS STATIC, 

FORMS ONT FORMULATE JSON 

SPRING: code that you want to use in your service... (static method in a class)
- pull them on demand when you want to use them per object 
- SAME PRINCIPLE but for SERVICES 
- injection framework 

MOM - MESSAGE ORIENTED MIDDLEWARE: async = true scalable systems  
- point to point model: based on fifo, multiple senders can post to queue 
- client => msg => SENDS TO QUEUE <= consumes / agnoledge message <= client 2

PUBLISH SUBSCRIBE: async = true scalable systems  
    - topical message queue 
    - fully decouples sender (publisher) and receiver (subscriber)
    - delivered to all active subscriber 
    Client => topic <= (subscribe and delivers) client 1 & 2 

    Client => request => Broker => <= clients, clients clients 


    JMS API Programming Model 
    - connection factory => connection => session => 
    - Pub/Sub = JVM messages

Actors => 
    - Anatomy of an actor 
    - > thread____ mailbox, method, state ___ > thread
    - A SYNC MESSAGE => (ACTORS = state + behavior + mailbox + autonomy) => interface 

ACTORS LANGUAGES : 
- Erlang 
- RevActor
- Salsa
- Kilim 
- RevActorAkka
- Project Orleans


