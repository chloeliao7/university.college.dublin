<HTML>
	<HEAD>
		<TITLE>Comp47480: Object-Oriented Principles Tutorial</TITLE>
	</HEAD>
	<BODY BGCOLOR="#CCFFCC">
		<H2 ALIGN="center">Comp47480: Object-Oriented Principles Tutorial </H2>
		<BLOCKQUOTE>
			<P>
				These exercises all relate to the object-oriented principles we studied in lectures. The Java examples are very simple, but don't just rattle off a solution as this will not help you learn about the principle and this will be reflected in your journal entry. Make sure you understand the principle in every case and the implications of following or not following it.
			</P>
			<P>
				Needless to say, these simple examples are only used to illustrate the principles. It's in larger software projects that following sound object-oriented principles yields benefits by making the software easier to understand and to update.
			</P>
			<hr size="2" width="100%" align="center" />
			<h3>The Open Closed Principle</h3>
			<P>
				Look at the classes <tt>PostageStamp</tt> and <tt>Square</tt> in <A href="OCP.java"> OCP.java </A>. There's an obvious violation of the open closed principle here. Decide what it is, bearing in mind that stamps may have different shapes. Update this example to observe the the open closed principle, so that it becomes possible to create stamps that are circular in shape. If you do this correctly, it will be possible to create stamps of different shapes <b>without changing the <tt>PostageStamp</tt> class</b>. Thus the <tt>PostageStamp</tt> class can be closed for modification but open for extension.
			</P>
			<hr size="2" width="100%" align="center" />
			<h3>The Single Responsibility Principle</h3>
			<P> Zorg from Pluto is tasked with building a software model of the creatures who inhabit Earth, as he is the only member of the software team who has ever actually been there. His sole visit was to Killiney during a meeting of the local dog walkers group, so Zorg models what he experienced in the class <tt>Hexapod</tt> in the file <A href="SRP.java"> SRP.java </A>. </P>
			<P> Understandably, Zorg's single visit to Earth did not make him a domain expert, and his <tt>Hexapod</tt> class did not observe the single responsibility principle. Update this class so that it observes the single responsibility principle. Doing this should make the code clearer, create more classes (think about how many) and make it likely that any new requirements will affect only one class. </P>
			<P>
				(A Hexapod is a six-legged creature. I hope it is obvious what six-legged creatures Zorg observed, while watching two-legged people walking four-legged dogs. In an unknown domain, it's easy to group together things that really should be modelled separately.)
			</P>
			<hr size="2" width="100%" align="center" />
			<h3>The Law of Demeter</h3>
			<P> In the file <A href="Demeter.java">Demeter.java </A> you find a sketch of a simple example showing a customer being charged for a purchase in a shop. It looks harmless enough, but there's a violation of the Law of Demeter here that unnecessarily increases the coupling between classes, and is also a incorrect model of how shopkeepers and customers usually interact in the real world. </P>
			<P>
				Find this violation and make sure you understand it and its implications for software maintenance. Fix the violation.
			</P>
			<hr size="2" width="100%" align="center" />
			<h3>Submission and Lab Journal entry</h3>
			<p>
				The artefact for this practical is your solution to each of the three parts, so it comprises three Java files. Submit your lab journal entry, following the usual guidelines. Jacek will answer any questions you have during the practical.
			</p>
			<hr size="2" width="100%" align="center" />
			<!-- <CENTER>&copy; Mel Ó Cinnéide 2005</CENTER> -->
		</BLOCKQUOTE>
	</BODY>
</HTML>
